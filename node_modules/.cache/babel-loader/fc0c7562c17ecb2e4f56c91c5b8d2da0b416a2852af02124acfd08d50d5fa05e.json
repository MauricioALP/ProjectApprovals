{"ast":null,"code":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\n// Mock data for initial state\nconst mockProjects = [{\n  id: '1',\n  name: 'AI-Powered Data Analytics Platform',\n  scope: 'Develop an intelligent analytics platform for operational data',\n  objective: 'Improve decision-making through AI-driven insights',\n  owner: 'Juan Carlos Pérez',\n  createdAt: '2024-01-15',\n  features: ['Artificial Intelligence', 'Data', 'Analytics'],\n  developmentType: 'Self-development',\n  state: 'Approved',\n  aiResources: ['Azure AI Foundry', 'OpenAI'],\n  dataAccess: ['Production Database', 'Historical Records'],\n  analyticsResources: ['Databricks', 'Power BI Premium'],\n  infrastructureAccess: ['Azure Subscription', 'Database Access'],\n  approvals: [{\n    role: 'IT Manager',\n    status: 'Approved',\n    date: '2024-01-20'\n  }, {\n    role: 'Data Officer',\n    status: 'Approved',\n    date: '2024-01-22'\n  }]\n}, {\n  id: '2',\n  name: 'Power Platform Automation Suite',\n  scope: 'Automate business processes using Power Platform',\n  objective: 'Reduce manual work and improve efficiency',\n  owner: 'María González',\n  createdAt: '2024-01-10',\n  features: ['Power Platform'],\n  developmentType: 'Third-party development',\n  state: 'In Progress',\n  powerPlatformResources: ['Power Automate', 'Power Apps', 'Power BI'],\n  approvals: [{\n    role: 'Business Manager',\n    status: 'Approved',\n    date: '2024-01-15'\n  }, {\n    role: 'IT Manager',\n    status: 'Approved',\n    date: '2024-01-18'\n  }]\n}, {\n  id: '3',\n  name: 'Data Warehouse Modernization',\n  scope: 'Upgrade existing data warehouse infrastructure',\n  objective: 'Improve data processing performance and scalability',\n  owner: 'Carlos Rodríguez',\n  createdAt: '2024-01-05',\n  features: ['Data', 'Analytics'],\n  developmentType: 'Self-development',\n  state: 'Draft',\n  dataAccess: ['Legacy Systems', 'External APIs'],\n  analyticsResources: ['Azure Synapse', 'Power BI'],\n  infrastructureAccess: ['Azure Resources', 'Database Admin Access'],\n  approvals: []\n}];\nconst mockUsers = [{\n  id: '1',\n  name: 'Juan Carlos Pérez',\n  role: 'Data Scientist',\n  email: 'juan.perez@ecopetrol.com'\n}, {\n  id: '2',\n  name: 'María González',\n  role: 'Business Analyst',\n  email: 'maria.gonzalez@ecopetrol.com'\n}, {\n  id: '3',\n  name: 'Carlos Rodríguez',\n  role: 'Data Engineer',\n  email: 'carlos.rodriguez@ecopetrol.com'\n}, {\n  id: '4',\n  name: 'Ana Martínez',\n  role: 'IT Manager',\n  email: 'ana.martinez@ecopetrol.com'\n}, {\n  id: '5',\n  name: 'Luis Fernández',\n  role: 'Data Officer',\n  email: 'luis.fernandez@ecopetrol.com'\n}];\nexport const useStore = create(persist((set, get) => ({\n  // State\n  projects: mockProjects,\n  users: mockUsers,\n  currentUser: mockUsers[0],\n  // Simulate logged-in user\n  darkMode: false,\n  notifications: [],\n  // Actions\n  addProject: project => set(state => ({\n    projects: [...state.projects, {\n      ...project,\n      id: Date.now().toString()\n    }]\n  })),\n  updateProject: (id, updates) => set(state => ({\n    projects: state.projects.map(project => project.id === id ? {\n      ...project,\n      ...updates\n    } : project)\n  })),\n  deleteProject: id => set(state => ({\n    projects: state.projects.filter(project => project.id !== id)\n  })),\n  updateProjectState: (id, newState) => set(state => ({\n    projects: state.projects.map(project => project.id === id ? {\n      ...project,\n      state: newState\n    } : project)\n  })),\n  addNotification: notification => set(state => ({\n    notifications: [...state.notifications, {\n      ...notification,\n      id: Date.now().toString()\n    }]\n  })),\n  removeNotification: id => set(state => ({\n    notifications: state.notifications.filter(n => n.id !== id)\n  })),\n  toggleDarkMode: () => set(state => ({\n    darkMode: !state.darkMode\n  })),\n  // Computed values\n  getProjectsByState: state => get().projects.filter(p => p.state === state),\n  getProjectCounts: () => {\n    const projects = get().projects;\n    return {\n      Draft: projects.filter(p => p.state === 'Draft').length,\n      Created: projects.filter(p => p.state === 'Created').length,\n      Approved: projects.filter(p => p.state === 'Approved').length,\n      'In Progress': projects.filter(p => p.state === 'In Progress').length,\n      Completed: projects.filter(p => p.state === 'Completed').length\n    };\n  },\n  getProjectsByUser: userId => get().projects.filter(p => p.owner === userId),\n  getProjectsByFeature: feature => get().projects.filter(p => p.features.includes(feature))\n}), {\n  name: 'project-approvals-storage',\n  partialize: state => ({\n    projects: state.projects,\n    users: state.users,\n    darkMode: state.darkMode\n  })\n}));","map":{"version":3,"names":["create","persist","mockProjects","id","name","scope","objective","owner","createdAt","features","developmentType","state","aiResources","dataAccess","analyticsResources","infrastructureAccess","approvals","role","status","date","powerPlatformResources","mockUsers","email","useStore","set","get","projects","users","currentUser","darkMode","notifications","addProject","project","Date","now","toString","updateProject","updates","map","deleteProject","filter","updateProjectState","newState","addNotification","notification","removeNotification","n","toggleDarkMode","getProjectsByState","p","getProjectCounts","Draft","length","Created","Approved","Completed","getProjectsByUser","userId","getProjectsByFeature","feature","includes","partialize"],"sources":["C:/Users/mercu/OneDrive/Escritorio/Repos/ProjectApprovals/src/store/index.js"],"sourcesContent":["import { create } from 'zustand';\r\nimport { persist } from 'zustand/middleware';\r\n\r\n// Mock data for initial state\r\nconst mockProjects = [\r\n  {\r\n    id: '1',\r\n    name: 'AI-Powered Data Analytics Platform',\r\n    scope: 'Develop an intelligent analytics platform for operational data',\r\n    objective: 'Improve decision-making through AI-driven insights',\r\n    owner: 'Juan Carlos Pérez',\r\n    createdAt: '2024-01-15',\r\n    features: ['Artificial Intelligence', 'Data', 'Analytics'],\r\n    developmentType: 'Self-development',\r\n    state: 'Approved',\r\n    aiResources: ['Azure AI Foundry', 'OpenAI'],\r\n    dataAccess: ['Production Database', 'Historical Records'],\r\n    analyticsResources: ['Databricks', 'Power BI Premium'],\r\n    infrastructureAccess: ['Azure Subscription', 'Database Access'],\r\n    approvals: [\r\n      { role: 'IT Manager', status: 'Approved', date: '2024-01-20' },\r\n      { role: 'Data Officer', status: 'Approved', date: '2024-01-22' }\r\n    ]\r\n  },\r\n  {\r\n    id: '2',\r\n    name: 'Power Platform Automation Suite',\r\n    scope: 'Automate business processes using Power Platform',\r\n    objective: 'Reduce manual work and improve efficiency',\r\n    owner: 'María González',\r\n    createdAt: '2024-01-10',\r\n    features: ['Power Platform'],\r\n    developmentType: 'Third-party development',\r\n    state: 'In Progress',\r\n    powerPlatformResources: ['Power Automate', 'Power Apps', 'Power BI'],\r\n    approvals: [\r\n      { role: 'Business Manager', status: 'Approved', date: '2024-01-15' },\r\n      { role: 'IT Manager', status: 'Approved', date: '2024-01-18' }\r\n    ]\r\n  },\r\n  {\r\n    id: '3',\r\n    name: 'Data Warehouse Modernization',\r\n    scope: 'Upgrade existing data warehouse infrastructure',\r\n    objective: 'Improve data processing performance and scalability',\r\n    owner: 'Carlos Rodríguez',\r\n    createdAt: '2024-01-05',\r\n    features: ['Data', 'Analytics'],\r\n    developmentType: 'Self-development',\r\n    state: 'Draft',\r\n    dataAccess: ['Legacy Systems', 'External APIs'],\r\n    analyticsResources: ['Azure Synapse', 'Power BI'],\r\n    infrastructureAccess: ['Azure Resources', 'Database Admin Access'],\r\n    approvals: []\r\n  }\r\n];\r\n\r\nconst mockUsers = [\r\n  { id: '1', name: 'Juan Carlos Pérez', role: 'Data Scientist', email: 'juan.perez@ecopetrol.com' },\r\n  { id: '2', name: 'María González', role: 'Business Analyst', email: 'maria.gonzalez@ecopetrol.com' },\r\n  { id: '3', name: 'Carlos Rodríguez', role: 'Data Engineer', email: 'carlos.rodriguez@ecopetrol.com' },\r\n  { id: '4', name: 'Ana Martínez', role: 'IT Manager', email: 'ana.martinez@ecopetrol.com' },\r\n  { id: '5', name: 'Luis Fernández', role: 'Data Officer', email: 'luis.fernandez@ecopetrol.com' }\r\n];\r\n\r\nexport const useStore = create(\r\n  persist(\r\n    (set, get) => ({\r\n      // State\r\n      projects: mockProjects,\r\n      users: mockUsers,\r\n      currentUser: mockUsers[0], // Simulate logged-in user\r\n      darkMode: false,\r\n      notifications: [],\r\n      \r\n      // Actions\r\n      addProject: (project) => set((state) => ({\r\n        projects: [...state.projects, { ...project, id: Date.now().toString() }]\r\n      })),\r\n      \r\n      updateProject: (id, updates) => set((state) => ({\r\n        projects: state.projects.map(project => \r\n          project.id === id ? { ...project, ...updates } : project\r\n        )\r\n      })),\r\n      \r\n      deleteProject: (id) => set((state) => ({\r\n        projects: state.projects.filter(project => project.id !== id)\r\n      })),\r\n      \r\n      updateProjectState: (id, newState) => set((state) => ({\r\n        projects: state.projects.map(project => \r\n          project.id === id ? { ...project, state: newState } : project\r\n        )\r\n      })),\r\n      \r\n      addNotification: (notification) => set((state) => ({\r\n        notifications: [...state.notifications, { ...notification, id: Date.now().toString() }]\r\n      })),\r\n      \r\n      removeNotification: (id) => set((state) => ({\r\n        notifications: state.notifications.filter(n => n.id !== id)\r\n      })),\r\n      \r\n      toggleDarkMode: () => set((state) => ({ darkMode: !state.darkMode })),\r\n      \r\n      // Computed values\r\n      getProjectsByState: (state) => get().projects.filter(p => p.state === state),\r\n      \r\n      getProjectCounts: () => {\r\n        const projects = get().projects;\r\n        return {\r\n          Draft: projects.filter(p => p.state === 'Draft').length,\r\n          Created: projects.filter(p => p.state === 'Created').length,\r\n          Approved: projects.filter(p => p.state === 'Approved').length,\r\n          'In Progress': projects.filter(p => p.state === 'In Progress').length,\r\n          Completed: projects.filter(p => p.state === 'Completed').length,\r\n        };\r\n      },\r\n      \r\n      getProjectsByUser: (userId) => get().projects.filter(p => p.owner === userId),\r\n      \r\n      getProjectsByFeature: (feature) => get().projects.filter(p => p.features.includes(feature)),\r\n    }),\r\n    {\r\n      name: 'project-approvals-storage',\r\n      partialize: (state) => ({ \r\n        projects: state.projects, \r\n        users: state.users, \r\n        darkMode: state.darkMode \r\n      }),\r\n    }\r\n  )\r\n);\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,OAAO,QAAQ,oBAAoB;;AAE5C;AACA,MAAMC,YAAY,GAAG,CACnB;EACEC,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE,oCAAoC;EAC1CC,KAAK,EAAE,gEAAgE;EACvEC,SAAS,EAAE,oDAAoD;EAC/DC,KAAK,EAAE,mBAAmB;EAC1BC,SAAS,EAAE,YAAY;EACvBC,QAAQ,EAAE,CAAC,yBAAyB,EAAE,MAAM,EAAE,WAAW,CAAC;EAC1DC,eAAe,EAAE,kBAAkB;EACnCC,KAAK,EAAE,UAAU;EACjBC,WAAW,EAAE,CAAC,kBAAkB,EAAE,QAAQ,CAAC;EAC3CC,UAAU,EAAE,CAAC,qBAAqB,EAAE,oBAAoB,CAAC;EACzDC,kBAAkB,EAAE,CAAC,YAAY,EAAE,kBAAkB,CAAC;EACtDC,oBAAoB,EAAE,CAAC,oBAAoB,EAAE,iBAAiB,CAAC;EAC/DC,SAAS,EAAE,CACT;IAAEC,IAAI,EAAE,YAAY;IAAEC,MAAM,EAAE,UAAU;IAAEC,IAAI,EAAE;EAAa,CAAC,EAC9D;IAAEF,IAAI,EAAE,cAAc;IAAEC,MAAM,EAAE,UAAU;IAAEC,IAAI,EAAE;EAAa,CAAC;AAEpE,CAAC,EACD;EACEhB,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE,iCAAiC;EACvCC,KAAK,EAAE,kDAAkD;EACzDC,SAAS,EAAE,2CAA2C;EACtDC,KAAK,EAAE,gBAAgB;EACvBC,SAAS,EAAE,YAAY;EACvBC,QAAQ,EAAE,CAAC,gBAAgB,CAAC;EAC5BC,eAAe,EAAE,yBAAyB;EAC1CC,KAAK,EAAE,aAAa;EACpBS,sBAAsB,EAAE,CAAC,gBAAgB,EAAE,YAAY,EAAE,UAAU,CAAC;EACpEJ,SAAS,EAAE,CACT;IAAEC,IAAI,EAAE,kBAAkB;IAAEC,MAAM,EAAE,UAAU;IAAEC,IAAI,EAAE;EAAa,CAAC,EACpE;IAAEF,IAAI,EAAE,YAAY;IAAEC,MAAM,EAAE,UAAU;IAAEC,IAAI,EAAE;EAAa,CAAC;AAElE,CAAC,EACD;EACEhB,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE,8BAA8B;EACpCC,KAAK,EAAE,gDAAgD;EACvDC,SAAS,EAAE,qDAAqD;EAChEC,KAAK,EAAE,kBAAkB;EACzBC,SAAS,EAAE,YAAY;EACvBC,QAAQ,EAAE,CAAC,MAAM,EAAE,WAAW,CAAC;EAC/BC,eAAe,EAAE,kBAAkB;EACnCC,KAAK,EAAE,OAAO;EACdE,UAAU,EAAE,CAAC,gBAAgB,EAAE,eAAe,CAAC;EAC/CC,kBAAkB,EAAE,CAAC,eAAe,EAAE,UAAU,CAAC;EACjDC,oBAAoB,EAAE,CAAC,iBAAiB,EAAE,uBAAuB,CAAC;EAClEC,SAAS,EAAE;AACb,CAAC,CACF;AAED,MAAMK,SAAS,GAAG,CAChB;EAAElB,EAAE,EAAE,GAAG;EAAEC,IAAI,EAAE,mBAAmB;EAAEa,IAAI,EAAE,gBAAgB;EAAEK,KAAK,EAAE;AAA2B,CAAC,EACjG;EAAEnB,EAAE,EAAE,GAAG;EAAEC,IAAI,EAAE,gBAAgB;EAAEa,IAAI,EAAE,kBAAkB;EAAEK,KAAK,EAAE;AAA+B,CAAC,EACpG;EAAEnB,EAAE,EAAE,GAAG;EAAEC,IAAI,EAAE,kBAAkB;EAAEa,IAAI,EAAE,eAAe;EAAEK,KAAK,EAAE;AAAiC,CAAC,EACrG;EAAEnB,EAAE,EAAE,GAAG;EAAEC,IAAI,EAAE,cAAc;EAAEa,IAAI,EAAE,YAAY;EAAEK,KAAK,EAAE;AAA6B,CAAC,EAC1F;EAAEnB,EAAE,EAAE,GAAG;EAAEC,IAAI,EAAE,gBAAgB;EAAEa,IAAI,EAAE,cAAc;EAAEK,KAAK,EAAE;AAA+B,CAAC,CACjG;AAED,OAAO,MAAMC,QAAQ,GAAGvB,MAAM,CAC5BC,OAAO,CACL,CAACuB,GAAG,EAAEC,GAAG,MAAM;EACb;EACAC,QAAQ,EAAExB,YAAY;EACtByB,KAAK,EAAEN,SAAS;EAChBO,WAAW,EAAEP,SAAS,CAAC,CAAC,CAAC;EAAE;EAC3BQ,QAAQ,EAAE,KAAK;EACfC,aAAa,EAAE,EAAE;EAEjB;EACAC,UAAU,EAAGC,OAAO,IAAKR,GAAG,CAAEb,KAAK,KAAM;IACvCe,QAAQ,EAAE,CAAC,GAAGf,KAAK,CAACe,QAAQ,EAAE;MAAE,GAAGM,OAAO;MAAE7B,EAAE,EAAE8B,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC;IAAE,CAAC;EACzE,CAAC,CAAC,CAAC;EAEHC,aAAa,EAAEA,CAACjC,EAAE,EAAEkC,OAAO,KAAKb,GAAG,CAAEb,KAAK,KAAM;IAC9Ce,QAAQ,EAAEf,KAAK,CAACe,QAAQ,CAACY,GAAG,CAACN,OAAO,IAClCA,OAAO,CAAC7B,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAG6B,OAAO;MAAE,GAAGK;IAAQ,CAAC,GAAGL,OACnD;EACF,CAAC,CAAC,CAAC;EAEHO,aAAa,EAAGpC,EAAE,IAAKqB,GAAG,CAAEb,KAAK,KAAM;IACrCe,QAAQ,EAAEf,KAAK,CAACe,QAAQ,CAACc,MAAM,CAACR,OAAO,IAAIA,OAAO,CAAC7B,EAAE,KAAKA,EAAE;EAC9D,CAAC,CAAC,CAAC;EAEHsC,kBAAkB,EAAEA,CAACtC,EAAE,EAAEuC,QAAQ,KAAKlB,GAAG,CAAEb,KAAK,KAAM;IACpDe,QAAQ,EAAEf,KAAK,CAACe,QAAQ,CAACY,GAAG,CAACN,OAAO,IAClCA,OAAO,CAAC7B,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAG6B,OAAO;MAAErB,KAAK,EAAE+B;IAAS,CAAC,GAAGV,OACxD;EACF,CAAC,CAAC,CAAC;EAEHW,eAAe,EAAGC,YAAY,IAAKpB,GAAG,CAAEb,KAAK,KAAM;IACjDmB,aAAa,EAAE,CAAC,GAAGnB,KAAK,CAACmB,aAAa,EAAE;MAAE,GAAGc,YAAY;MAAEzC,EAAE,EAAE8B,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC;IAAE,CAAC;EACxF,CAAC,CAAC,CAAC;EAEHU,kBAAkB,EAAG1C,EAAE,IAAKqB,GAAG,CAAEb,KAAK,KAAM;IAC1CmB,aAAa,EAAEnB,KAAK,CAACmB,aAAa,CAACU,MAAM,CAACM,CAAC,IAAIA,CAAC,CAAC3C,EAAE,KAAKA,EAAE;EAC5D,CAAC,CAAC,CAAC;EAEH4C,cAAc,EAAEA,CAAA,KAAMvB,GAAG,CAAEb,KAAK,KAAM;IAAEkB,QAAQ,EAAE,CAAClB,KAAK,CAACkB;EAAS,CAAC,CAAC,CAAC;EAErE;EACAmB,kBAAkB,EAAGrC,KAAK,IAAKc,GAAG,CAAC,CAAC,CAACC,QAAQ,CAACc,MAAM,CAACS,CAAC,IAAIA,CAAC,CAACtC,KAAK,KAAKA,KAAK,CAAC;EAE5EuC,gBAAgB,EAAEA,CAAA,KAAM;IACtB,MAAMxB,QAAQ,GAAGD,GAAG,CAAC,CAAC,CAACC,QAAQ;IAC/B,OAAO;MACLyB,KAAK,EAAEzB,QAAQ,CAACc,MAAM,CAACS,CAAC,IAAIA,CAAC,CAACtC,KAAK,KAAK,OAAO,CAAC,CAACyC,MAAM;MACvDC,OAAO,EAAE3B,QAAQ,CAACc,MAAM,CAACS,CAAC,IAAIA,CAAC,CAACtC,KAAK,KAAK,SAAS,CAAC,CAACyC,MAAM;MAC3DE,QAAQ,EAAE5B,QAAQ,CAACc,MAAM,CAACS,CAAC,IAAIA,CAAC,CAACtC,KAAK,KAAK,UAAU,CAAC,CAACyC,MAAM;MAC7D,aAAa,EAAE1B,QAAQ,CAACc,MAAM,CAACS,CAAC,IAAIA,CAAC,CAACtC,KAAK,KAAK,aAAa,CAAC,CAACyC,MAAM;MACrEG,SAAS,EAAE7B,QAAQ,CAACc,MAAM,CAACS,CAAC,IAAIA,CAAC,CAACtC,KAAK,KAAK,WAAW,CAAC,CAACyC;IAC3D,CAAC;EACH,CAAC;EAEDI,iBAAiB,EAAGC,MAAM,IAAKhC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAACc,MAAM,CAACS,CAAC,IAAIA,CAAC,CAAC1C,KAAK,KAAKkD,MAAM,CAAC;EAE7EC,oBAAoB,EAAGC,OAAO,IAAKlC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAACc,MAAM,CAACS,CAAC,IAAIA,CAAC,CAACxC,QAAQ,CAACmD,QAAQ,CAACD,OAAO,CAAC;AAC5F,CAAC,CAAC,EACF;EACEvD,IAAI,EAAE,2BAA2B;EACjCyD,UAAU,EAAGlD,KAAK,KAAM;IACtBe,QAAQ,EAAEf,KAAK,CAACe,QAAQ;IACxBC,KAAK,EAAEhB,KAAK,CAACgB,KAAK;IAClBE,QAAQ,EAAElB,KAAK,CAACkB;EAClB,CAAC;AACH,CACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}